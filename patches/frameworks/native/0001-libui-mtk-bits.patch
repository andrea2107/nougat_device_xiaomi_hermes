From bc3db8044d0438d5368e342bfd33de84c2b0f147 Mon Sep 17 00:00:00 2001
From: Moyster <oysterized@gmail.com>
Date: Fri, 18 Nov 2016 21:15:36 +0100
Subject: [PATCH] libui: mtk bits

Change-Id: I141eb6b4cc50b08f718638be1be513bd20c0add4
---
 include/ui/Fence.h                                 |   5 +
 include/ui/mediatek/IDumpTunnel.h                  |  49 +++++++++
 include/ui/mediatek/RefBaseDump.h                  |  63 ++++++++++++
 libs/ui/.GraphicBufferMapper.cpp.swp               | Bin 0 -> 16384 bytes
 libs/ui/Android.mk                                 |  15 +++
 libs/ui/mediatek/Fence.cpp                         |  59 +++++++++++
 libs/ui/mediatek/IDumpTunnel.cpp                   | 114 +++++++++++++++++++++
 libs/ui/mediatek/RefBaseDump.cpp                   | 111 ++++++++++++++++++++
 libs/ui/mediatek/test/Android.mk                   |   1 +
 libs/ui/mediatek/test/RefBaseDumpTunnel/Android.mk |  15 +++
 .../test/RefBaseDumpTunnel/RefBaseDumpTunnel.cpp   | 105 +++++++++++++++++++
 .../test/RefBaseDumpTunnel/RefBaseDumpTunnel.h     |  17 +++
 12 files changed, 554 insertions(+)
 create mode 100644 include/ui/mediatek/IDumpTunnel.h
 create mode 100644 include/ui/mediatek/RefBaseDump.h
 create mode 100644 libs/ui/.GraphicBufferMapper.cpp.swp
 create mode 100644 libs/ui/mediatek/Fence.cpp
 create mode 100644 libs/ui/mediatek/IDumpTunnel.cpp
 create mode 100644 libs/ui/mediatek/RefBaseDump.cpp
 create mode 100755 libs/ui/mediatek/test/Android.mk
 create mode 100755 libs/ui/mediatek/test/RefBaseDumpTunnel/Android.mk
 create mode 100644 libs/ui/mediatek/test/RefBaseDumpTunnel/RefBaseDumpTunnel.cpp
 create mode 100644 libs/ui/mediatek/test/RefBaseDumpTunnel/RefBaseDumpTunnel.h

diff --git a/include/ui/Fence.h b/include/ui/Fence.h
index b431bd5..befd640 100644
--- a/include/ui/Fence.h
+++ b/include/ui/Fence.h
@@ -110,6 +110,11 @@ private:
     const Fence& operator = (const Fence& rhs) const;
 
     int mFenceFd;
+
+#ifdef MTK_HARDWARE
+private:
+    void dump(int fd);
+#endif
 };
 
 }; // namespace android
diff --git a/include/ui/mediatek/IDumpTunnel.h b/include/ui/mediatek/IDumpTunnel.h
new file mode 100644
index 0000000..8f9b663
--- /dev/null
+++ b/include/ui/mediatek/IDumpTunnel.h
@@ -0,0 +1,49 @@
+#ifndef ANDROID_GUI_IDUMPTUNNEL_H
+#define ANDROID_GUI_IDUMPTUNNEL_H
+
+#include <binder/IInterface.h>
+#include <utils/Singleton.h>
+
+namespace android
+{
+
+class IDumpTunnel : public IInterface {
+protected:
+    enum {
+        DUMPTUNNEL_DUMP = IBinder::FIRST_CALL_TRANSACTION
+    };
+
+public:
+    DECLARE_META_INTERFACE(DumpTunnel);
+
+    virtual status_t kickDump(String8& /*result*/, const char* /*prefix*/) = 0;
+};
+
+class BnDumpTunnel : public BnInterface<IDumpTunnel>
+{
+    virtual status_t onTransact(uint32_t code,
+                                const Parcel& data,
+                                Parcel* reply,
+                                uint32_t flags = 0);
+};
+
+// helper class for libgui_ext dynamic linking
+class DumpTunnelHelper : public Singleton<DumpTunnelHelper> {
+    void* mSoHandle;
+    bool (*mRegDumpPtr)(const sp<IDumpTunnel>&, const String8&);
+    bool (*mUnregDumpPtr)(const String8&);
+
+public:
+    DumpTunnelHelper();
+    virtual ~DumpTunnelHelper();
+
+    // register tunnel into guiext-server with a given key name
+    // and need to unregister it back
+    // in general usage, need to use identical key name for reg/unreg pair
+    bool regDump(const sp<IDumpTunnel>& tunnel, const String8& key);
+    bool unregDump(const String8& key);
+};
+
+
+};
+#endif
diff --git a/include/ui/mediatek/RefBaseDump.h b/include/ui/mediatek/RefBaseDump.h
new file mode 100644
index 0000000..8431544
--- /dev/null
+++ b/include/ui/mediatek/RefBaseDump.h
@@ -0,0 +1,63 @@
+#ifndef ANDROID_REFBASE_DUMP_H__
+#define ANDROID_REFBASE_DUMP_H__
+
+#include <utils/String8.h>
+#include <utils/KeyedVector.h>
+#include <utils/Singleton.h>
+#include <ui/mediatek/IDumpTunnel.h>
+
+namespace android
+{
+class RefBaseMonitor;
+
+//-------------------------------------------------------------------------
+// RefBaseDump
+//-------------------------------------------------------------------------
+class RefBaseDump : public BnDumpTunnel {
+
+public:
+    RefBaseDump(RefBaseMonitor*);
+    virtual ~RefBaseDump();
+
+    // IDumpTunnel interface
+    virtual status_t kickDump(String8& /*result*/, const char* /*prefix*/);
+
+private:
+    RefBaseMonitor *mMonitor;
+};
+
+//-------------------------------------------------------------------------
+// RefBaseMonitor
+//-------------------------------------------------------------------------
+class RefBaseMonitor : public Singleton<RefBaseMonitor> {
+public:
+    RefBaseMonitor();
+    virtual ~RefBaseMonitor();
+
+    // add refbase to the monitored list
+    status_t monitor(RefBase* );
+
+    // remove refbase from the monitored list
+    status_t unmonitor(RefBase* );
+
+    // dump all elements in the monitored list and call printRefs if mIsTracking equals 1
+    status_t dump(String8& result);
+
+private:
+    status_t getProcessName();
+
+    // if trackMe needed
+    bool mIsTracking;
+
+    String8 mProcessName;
+
+    sp<RefBaseDump> mDump;
+
+    // the list where monitored refbase objects are saved
+    KeyedVector<RefBase*,int> RbList;
+
+    mutable Mutex mMutex;;
+};
+
+};
+#endif
diff --git a/libs/ui/.GraphicBufferMapper.cpp.swp b/libs/ui/.GraphicBufferMapper.cpp.swp
new file mode 100644
index 0000000000000000000000000000000000000000..670a698fa0fddb291646df9ec5dc2cdceb8399a1
GIT binary patch
literal 16384
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
SDB1kHv?hV5f-YjY%6|d4aJ9hz

literal 0
HcmV?d00001

diff --git a/libs/ui/Android.mk b/libs/ui/Android.mk
index 2b16365..fc8460f 100644
--- a/libs/ui/Android.mk
+++ b/libs/ui/Android.mk
@@ -48,6 +48,16 @@ LOCAL_SRC_FILES := \
 	Region.cpp \
 	UiConfig.cpp
 
+ifeq ($(BOARD_HAS_MTK_HARDWARE),true)
+LOCAL_SRC_FILES += \
+	mediatek/Fence.cpp \
+	mediatek/IDumpTunnel.cpp \
+	mediatek/RefBaseDump.cpp
+
+# just make everything compile for now... cleanups later
+LOCAL_CPPFLAGS := -std=c++1y -Weverything
+endif
+
 LOCAL_SHARED_LIBRARIES := \
 	libbinder \
 	libcutils \
@@ -56,6 +66,11 @@ LOCAL_SHARED_LIBRARIES := \
 	libutils \
 	liblog
 
+ifeq ($(BOARD_HAS_MTK_HARDWARE),true)
+LOCAL_SHARED_LIBRARIES += \
+	libbinder
+endif
+
 ifneq ($(BOARD_FRAMEBUFFER_FORCE_FORMAT),)
 LOCAL_CFLAGS += -DFRAMEBUFFER_FORCE_FORMAT=$(BOARD_FRAMEBUFFER_FORCE_FORMAT)
 endif
diff --git a/libs/ui/mediatek/Fence.cpp b/libs/ui/mediatek/Fence.cpp
new file mode 100644
index 0000000..c604cd0
--- /dev/null
+++ b/libs/ui/mediatek/Fence.cpp
@@ -0,0 +1,59 @@
+#define LOG_TAG "Fence"
+
+#include <sync/sync.h>
+#include <ui/Fence.h>
+#include <unistd.h>
+
+#include <cutils/log.h>
+
+// ---------------------------------------------------------------------------
+
+const char* findKeyWord(const char* msg) {
+    android::String8 obj_name(msg);
+    obj_name.toLower();
+    const char* OBJ_NAME = obj_name.string();
+
+    // NOTE: keep these keywords in sync with MOF
+    android::String8 keyword("timeline_");
+    if (strstr(OBJ_NAME, "surfaceflinger")) {
+        keyword.append("SurfaceFlinger");
+    } else if (strstr(OBJ_NAME, "ovl_timeline")) {
+        keyword.append("ovl_timeline");
+    } else if (strstr(OBJ_NAME, "mali")) {
+        keyword.append("mali");
+    }
+
+    return keyword.string();
+}
+
+// ---------------------------------------------------------------------------
+
+namespace android {
+
+void Fence::dump(int fd) {
+    if (-1 == fd) return;
+
+    struct sync_fence_info_data *info = sync_fence_info(fd);
+    if (info) {
+        struct sync_pt_info *pt_info = NULL;
+        // status: active(0) signaled(1) error(<0)
+        ALOGD("fence(%s) status(%d)", info->name, info->status);
+
+        // iterate active/error sync points
+        while ((pt_info = sync_pt_info(info, pt_info))) {
+            if (NULL != pt_info && pt_info->status <= 0) {
+                int ts_sec = pt_info->timestamp_ns / 1000000000LL;
+                int ts_usec = (pt_info->timestamp_ns % 1000000000LL) / 1000LL;
+
+                String8 msg = String8::format(
+                    "sync point: timeline(%s) drv(%s) status(%d) sync_drv(%u) timestamp(%d.%06d)",
+                    pt_info->obj_name, pt_info->driver_name, pt_info->status,
+                    *(uint32_t *)pt_info->driver_data, ts_sec, ts_usec);
+                ALOGD("%s", msg.string());
+            }
+        }
+        sync_fence_info_free(info);
+    }
+}
+
+} // namespace android
diff --git a/libs/ui/mediatek/IDumpTunnel.cpp b/libs/ui/mediatek/IDumpTunnel.cpp
new file mode 100644
index 0000000..d52f72a
--- /dev/null
+++ b/libs/ui/mediatek/IDumpTunnel.cpp
@@ -0,0 +1,114 @@
+#define LOG_TAG "DumpTunnel"
+
+#include <dlfcn.h>
+#include <utils/String8.h>
+#include <binder/Parcel.h>
+#include <cutils/log.h>
+#include <ui/mediatek/IDumpTunnel.h>
+
+namespace android {
+
+// client : proxy GuiEx class
+class BpDumpTunnel : public BpInterface<IDumpTunnel> {
+public:
+    BpDumpTunnel(const sp<IBinder>& impl)
+        :   BpInterface<IDumpTunnel>(impl) {
+    }
+
+    virtual status_t kickDump(String8& result, const char* prefix) {
+        Parcel data, reply;
+        data.writeInterfaceToken(IDumpTunnel::getInterfaceDescriptor());
+        data.writeString8(result);
+        data.writeCString(prefix);
+        status_t err = remote()->transact(DUMPTUNNEL_DUMP, data, &reply);
+        if (err != NO_ERROR) {
+            ALOGE("kickDump could not contact remote\n");
+            return err;
+        }
+        result = reply.readString8();
+        err = reply.readInt32();
+        return err;
+    }
+};
+
+IMPLEMENT_META_INTERFACE(DumpTunnel, "DumpTunnel");
+
+status_t BnDumpTunnel::onTransact(uint32_t code, const Parcel& data, Parcel* reply, uint32_t flags) {
+    switch (code) {
+        case DUMPTUNNEL_DUMP: {
+            CHECK_INTERFACE(IDumpTunnel, data, reply);
+            String8 result;
+            const char* prefix = NULL;
+            result = data.readString8();
+            prefix = data.readCString();
+
+            status_t ret = kickDump(result, prefix);
+            reply->writeString8(result);
+            reply->writeInt32(ret);
+            return NO_ERROR;
+        } break;
+    }
+    return BBinder::onTransact(code, data, reply, flags);
+}
+
+// ----------------------------------------------------------------------------
+
+ANDROID_SINGLETON_STATIC_INSTANCE(DumpTunnelHelper);
+
+DumpTunnelHelper::DumpTunnelHelper() :
+    mSoHandle(NULL),
+    mRegDumpPtr(NULL),
+    mUnregDumpPtr(NULL)
+{
+    typedef bool (*RegDumpPrototype)(const sp<IDumpTunnel>&, const String8&);
+    typedef bool (*UnregDumpPrototype)(const String8&);
+
+    // dlopen must set RTLD_LAZY flag because of performance issue
+    // need to use different path for 32/64 env
+#ifdef __LP64__
+    mSoHandle = dlopen("/system/lib64/libgui_ext.so", RTLD_LAZY);
+#else
+    mSoHandle = dlopen("/system/lib/libgui_ext.so", RTLD_LAZY);
+#endif
+    if (mSoHandle) {
+        mRegDumpPtr = reinterpret_cast<RegDumpPrototype>(dlsym(mSoHandle, "regDump"));
+        mUnregDumpPtr = reinterpret_cast<UnregDumpPrototype>(dlsym(mSoHandle, "unregDump"));
+        if (NULL == mRegDumpPtr) {
+            ALOGE("finding regDump() failed");
+        }
+        if (NULL == mUnregDumpPtr) {
+            ALOGE("finding unregDump() failed");
+        }
+    } else {
+        ALOGE("open libgui_ext failed");
+    }
+}
+
+DumpTunnelHelper::~DumpTunnelHelper() {
+    if(mSoHandle != NULL)
+        dlclose(mSoHandle);
+}
+
+bool DumpTunnelHelper::regDump(const sp<IDumpTunnel>& tunnel, const String8& key) {
+    bool result = false;
+    if (NULL == mRegDumpPtr) {
+        ALOGE("finding regDump() failed");
+        return result;
+    }
+    result = mRegDumpPtr(tunnel, key);
+
+    return result;
+}
+
+bool DumpTunnelHelper::unregDump(const String8& key) {
+    bool result = false;
+    if (NULL == mUnregDumpPtr) {
+        ALOGE("finding unregDump() failed");
+        return result;
+    }
+    result = mUnregDumpPtr(key);
+
+    return result;
+}
+
+};
diff --git a/libs/ui/mediatek/RefBaseDump.cpp b/libs/ui/mediatek/RefBaseDump.cpp
new file mode 100644
index 0000000..333add4
--- /dev/null
+++ b/libs/ui/mediatek/RefBaseDump.cpp
@@ -0,0 +1,111 @@
+#define LOG_TAG "RefBaseDump"
+
+#if 0
+#define RBD_LOGV(x, ...) ALOGV(x, ##__VA_ARGS__)
+#define RBD_LOGD(x, ...) ALOGD(x, ##__VA_ARGS__)
+#define RBD_LOGI(x, ...) ALOGI(x, ##__VA_ARGS__)
+#define RBD_LOGW(x, ...) ALOGW(x, ##__VA_ARGS__)
+#define RBD_LOGE(x, ...) ALOGE(x, ##__VA_ARGS__)
+#else
+#define RBD_LOGV(x, ...)
+#define RBD_LOGD(x, ...)
+#define RBD_LOGI(x, ...)
+#define RBD_LOGW(x, ...)
+#define RBD_LOGE(x, ...)
+#endif
+
+#include <cutils/log.h>
+#include <cutils/process_name.h>
+#include <cutils/properties.h>
+#include <ui/mediatek/RefBaseDump.h>
+
+namespace android {
+
+//-------------------------------------------------------------------------
+// RefBaseDump
+//-------------------------------------------------------------------------
+
+RefBaseDump::RefBaseDump(RefBaseMonitor* pMonitor)
+    : mMonitor(pMonitor) {
+}
+
+RefBaseDump::~RefBaseDump() {
+}
+
+status_t RefBaseDump::kickDump(String8& result, const char* prefix) {
+    return mMonitor->dump(result);
+}
+
+//-------------------------------------------------------------------------
+// RefBaseMonitor
+//-------------------------------------------------------------------------
+
+ANDROID_SINGLETON_STATIC_INSTANCE(RefBaseMonitor)
+
+RefBaseMonitor::RefBaseMonitor() {
+    char value[PROPERTY_VALUE_MAX];
+    RBD_LOGI("RefBaseMonitor ctor - %p", this);
+    getProcessName();
+    property_get("debug.rb.dump", value, "Mary had a little lamb");
+    mIsTracking = (-1 != mProcessName.find(value));
+    mDump = new RefBaseDump(this);
+    DumpTunnelHelper::getInstance().regDump(mDump, String8::format("RB-%p", this));
+}
+
+RefBaseMonitor::~RefBaseMonitor() {
+    RBD_LOGI("RefBaseMonitor dtor - %p", this);
+    DumpTunnelHelper::getInstance().unregDump(String8::format("RB-%p", this));
+}
+
+status_t RefBaseMonitor::monitor(RefBase *pRb) {
+    Mutex::Autolock _l(mMutex);
+    if (mIsTracking) {
+        pRb->trackMe(true, false);
+    }
+    RbList.add(pRb, 0);
+    return NO_ERROR;
+}
+
+status_t RefBaseMonitor::unmonitor(RefBase *pRb) {
+    Mutex::Autolock _l(mMutex);
+    RbList.removeItem(pRb);
+    return NO_ERROR;
+}
+
+status_t RefBaseMonitor::dump(String8& result) {
+    int listSz;
+    RefBase *pRb;
+    Mutex::Autolock _l(mMutex);
+    RBD_LOGI("RefBaseMonitor Dump - %p", this);
+    listSz = RbList.size();
+    result.appendFormat("\t  [%8p]    RefCnt   %s", this, mProcessName.string());
+    result.append(mIsTracking ? " <- tracking\n" : "\n");
+    result.append("\t  -----------------------\n");
+
+    for (int i = 0; i < listSz; i++) {
+        pRb = RbList.keyAt(i);
+        if (mIsTracking) {
+            pRb->printRefs();
+        }
+        result.appendFormat("\t   %2d) %8p %4d\n", i, pRb, pRb->getStrongCount());
+    }
+    result.append("\t*****************************************************\n");
+    return NO_ERROR;
+}
+
+status_t RefBaseMonitor::getProcessName() {
+    int pid = getpid();
+    FILE *fp = fopen(String8::format("/proc/%d/cmdline", pid), "r");
+    if (NULL != fp) {
+        const size_t size = 64;
+        char proc_name[size];
+        fgets(proc_name, size, fp);
+        fclose(fp);
+        mProcessName = proc_name;
+    } else {
+        mProcessName = "unknownProcess";
+    }
+    return NO_ERROR;
+}
+
+}
diff --git a/libs/ui/mediatek/test/Android.mk b/libs/ui/mediatek/test/Android.mk
new file mode 100755
index 0000000..82e7389
--- /dev/null
+++ b/libs/ui/mediatek/test/Android.mk
@@ -0,0 +1 @@
+#barrier
diff --git a/libs/ui/mediatek/test/RefBaseDumpTunnel/Android.mk b/libs/ui/mediatek/test/RefBaseDumpTunnel/Android.mk
new file mode 100755
index 0000000..79edcbc
--- /dev/null
+++ b/libs/ui/mediatek/test/RefBaseDumpTunnel/Android.mk
@@ -0,0 +1,15 @@
+LOCAL_PATH:= $(call my-dir)
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES:= \
+    RefBaseDumpTunnel.cpp
+
+LOCAL_SHARED_LIBRARIES := \
+    libutils \
+    libui
+
+LOCAL_MODULE:= test-RefBaseDumpTunnel
+
+LOCAL_MODULE_TAGS := tests
+
+include $(BUILD_EXECUTABLE)
diff --git a/libs/ui/mediatek/test/RefBaseDumpTunnel/RefBaseDumpTunnel.cpp b/libs/ui/mediatek/test/RefBaseDumpTunnel/RefBaseDumpTunnel.cpp
new file mode 100644
index 0000000..f935808
--- /dev/null
+++ b/libs/ui/mediatek/test/RefBaseDumpTunnel/RefBaseDumpTunnel.cpp
@@ -0,0 +1,105 @@
+#include <stdio.h>
+#include <time.h>
+#include <utils/StrongPointer.h>
+#include "RefBaseDumpTunnel.h"
+
+using namespace android;
+
+void RefBaseMonitorTest_Assignment(int testCnt, struct timespec *tsS, struct timespec *tsE ) {
+    sp<RefBaseTest> sp1 = new RefBaseTest();
+    sp<RefBaseTest> sp2;
+    //printf("[1]");
+    clock_gettime(CLOCK_PROCESS_CPUTIME_ID, tsS);
+    //printf("with RefBaseTracking....S:%d(ns)\n",tsS.tv_nsec);
+    for (int i = 0; i < testCnt; i++) {
+         sp2 = sp1;
+    }
+    clock_gettime(CLOCK_PROCESS_CPUTIME_ID, tsE);
+}
+
+void RefBaseMonitorTest_CtorDtor(int testCnt, struct timespec *tsS, struct timespec *tsE ) {
+    RefBaseTest *rbtmp;
+    //printf("[2]");
+    clock_gettime(CLOCK_PROCESS_CPUTIME_ID, tsS);
+    //printf("with RefBaseTracking....S:%d(ns)\n",tsS.tv_nsec);
+    for (int i = 0; i < testCnt; i++) {
+        rbtmp = new RefBaseTest();
+        delete rbtmp;
+    }
+    clock_gettime(CLOCK_PROCESS_CPUTIME_ID, tsE);
+    //printf("with RefBaseTracking....E:%d(ns)\n",tsE.tv_nsec);
+}
+
+void RefBaseMonitorTest_CtorDtorAssgnment(int testCnt, struct timespec *tsS, struct timespec *tsE ) {
+    sp<RefBaseTest> sp1 = new RefBaseTest();
+    //printf("[3]");
+    clock_gettime(CLOCK_PROCESS_CPUTIME_ID, tsS);
+    //printf("with RefBaseTracking....S:%d(ns)\n",tsS.tv_nsec);
+    for (int i = 0; i < testCnt; i++) {
+        sp1 = new RefBaseTest();
+    }
+    clock_gettime(CLOCK_PROCESS_CPUTIME_ID, tsE);
+    //printf("with RefBaseTracking....E:%d(ns)\n",tsE.tv_nsec);
+}
+
+void RefBaseMonitorSubTest (int testRound, int testCntPerRound, void (*testFunc)(int, struct timespec *, struct timespec *)) {
+    struct timespec tsS;
+    struct timespec tsE;
+    int tmp;
+    int totalCnt;
+    int timeWithTracking = 0;
+
+    for(int j = 0; j < testRound; j++) {
+        //printf("Rnd: %d",j);
+        (*testFunc)(testCntPerRound, &tsS, &tsE);
+
+        tmp = tsE.tv_nsec - tsS.tv_nsec;
+        if (tmp < 0) {
+            tmp = 1000000000L + tsE.tv_nsec - tsS.tv_nsec;
+        }
+        timeWithTracking += tmp;
+        //printf("with RefBaseTracking....D:%d(ns)\n",tmp);
+    }
+    totalCnt = testRound * testCntPerRound;
+    printf("%12d(ns) = TotalTime: %12d(ns) / TestCnt: %d \n", timeWithTracking / totalCnt, timeWithTracking, totalCnt);
+
+}
+
+void RefBaseMonitorTest(int recCount, int testRound, int testCntPerRound) {
+    int tmp = recCount;
+    if (recCount == 0) {
+        RefBaseMonitorSubTest(testRound, testCntPerRound, RefBaseMonitorTest_Assignment);
+        RefBaseMonitorSubTest(testRound, testCntPerRound, RefBaseMonitorTest_CtorDtor);
+        RefBaseMonitorSubTest(testRound, testCntPerRound, RefBaseMonitorTest_CtorDtorAssgnment);
+    } else {
+        recCount--;
+        RefBaseMonitorTest(recCount, testRound, testCntPerRound);
+    }
+    printf("(stack:%d)", tmp);
+}
+
+int main(int argc, char** argv) {
+    int recLv;
+    int testRound;
+    int testCntPerRound;
+    int recCntTime;
+
+    if (argc == 5) {
+        sscanf(argv[1], "%d", &recLv);
+        sscanf(argv[2], "%d", &recCntTime);
+        sscanf(argv[3], "%d", &testRound);
+        sscanf(argv[4], "%d", &testCntPerRound);
+        if ((recLv >= 0) && (recCntTime > 0) && (testRound > 0) && (testCntPerRound > 0)) {
+            for (int i = 0; i < recCntTime; i++) {
+                printf("\nrec[ n + %d ]\n", i + recLv);
+                RefBaseMonitorTest(i + recLv, testRound, testCntPerRound);
+            }
+            printf("\n\n");
+            return 0;
+        }
+    }
+    printf("test-RefBaseDumpTunnel recLv recTimes testRnd testCntPerRnd\n");
+    return 0;
+}
+
+
diff --git a/libs/ui/mediatek/test/RefBaseDumpTunnel/RefBaseDumpTunnel.h b/libs/ui/mediatek/test/RefBaseDumpTunnel/RefBaseDumpTunnel.h
new file mode 100644
index 0000000..5ba0025
--- /dev/null
+++ b/libs/ui/mediatek/test/RefBaseDumpTunnel/RefBaseDumpTunnel.h
@@ -0,0 +1,17 @@
+#include <utils/RefBase.h>
+#include <ui/mediatek/RefBaseDumpTunnel.h>
+
+namespace android
+{
+
+class RefBaseTest: public RefBase{
+    public:
+        RefBaseTest(){
+            RefBaseMonitor::getInstance().monitor(this);
+        }
+        ~RefBaseTest(){
+            RefBaseMonitor::getInstance().unmonitor(this);
+        }
+};
+
+};
-- 
2.9.3

